{"version":3,"file":"menu.js","sourceRoot":"","sources":["../../src/lib/menu.ts"],"names":[],"mappings":"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","sourcesContent":["import inquirer from 'inquirer';\nimport 'console.table';\n\nimport { getAllDepartments, getAllRoles, getAllEmployees, addDepartment, addEmployee, updateEmployeeRole } from './query.js';\n\nexport async function showMainMenu() {\n    const { action } = await inquirer.prompt({\n        name: 'action',\n        type: 'list',\n        message: 'What would you like to do?',\n        choices: [\n            'View All Departments',\n            'View All Roles',\n            'View All Employees',\n            'Add a Department',\n            'Add a role',\n            'Add an employee',\n            'Update an employee role',\n            'Quit'\n        ],\n    });\n\n    switch (action) {\n        case 'View All Departments':\n            console.table(await getAllDepartments());\n            break;\n        case 'View All Roles':\n            console.table(await getAllRoles());\n            break;\n        case 'View All Employees':\n            console.table(await getAllEmployees());\n            break;\n        case 'Add a Department':\n            const {departmentName} = await inquirer.prompt({\n                name: 'departmentName',\n                type: 'input',\n                message: 'What is the name of the department?',\n\n            });\n            await addDepartment(departmentName);\n            console.log(`Added department: ${departmentName}`);\n            break;\n        case 'Add a Role':\n            const departments = await getAllDepartments();\n            const employees = await getAllEmployees();\n            const { first_name, last_name, role_id, manager_id } = await inquirer.prompt([\n                { name: 'first_name', type: 'input', message: 'Enter the first name of the employee:' },\n                { name: 'last_name', type: 'input', message: 'Enter the last name of the employee:' },\n                {\n                    name: 'role_id',\n                    type: 'list',\n                    message: 'Select the role for the employee:',\n                    choices: departments.map(department => ({ name: department.name, value: department.id })),\n                },\n                {\n                    name: 'manager_id',\n                    type: 'list',\n                    message: 'Select the employee manager:',\n                    choices: [{ name: 'None', value: null }].concat(employees.map(employee => ({ name: `${employee.first_name} ${employee.last_name}`, value: employee.id }))),\n                },\n            ]);\n            await addEmployee(first_name, last_name, role_id, manager_id);\n            console.log(`Added employee: ${first_name} ${last_name}`);\n            break;\n        case 'Update an employee role':\n            const allEmployees = await getAllEmployees();\n            const allRoles = await getAllRoles();\n            const {employee_id, new_role_id} = await inquirer.prompt([\n                {\n                    name: 'employee_id',\n                    type: 'list',\n                    message: 'Selet employee to update:',\n                    choices: allEmployees.map(employee => ({name: `${employee.first_name} ${employee.last_name}`, value: employee.id})),\n                },\n                {\n                    name: 'new_role_id',\n                    type: 'list',\n                    message: 'Select new role for the employee:',\n                    choices: allRoles.map((role => ({name: role.title, value: role.id}))),\n                },\n            ]);\n            await updateEmployeeRole(employee_id, new_role_id);\n            console.log('Updated employees role');\n            break;\n        case 'Quit':\n            console.log('\\nThanks for using the Employee Tracker App!\\n')\n            process.exit();\n\n    }\n    \n    showMainMenu();\n}"]}